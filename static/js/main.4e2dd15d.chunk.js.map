{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","person","className","alt","src","id","name","href","website","target","rel","type","CardList","team","map","key","Search","placeholder","handleChange","onChange","App","handleSearchChange","e","setState","search","value","state","People","this","filteredTeam","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"64CAIaA,G,MAAO,SAACC,GAAW,IACtBC,EAAWD,EAAXC,OAER,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAOI,GAAjC,4BACrB,4BAAKJ,EAAOK,MACZ,uBACEC,KAAMN,EAAOO,QACbC,OAAO,SACPC,IAAI,uBAEJ,4BAAQC,KAAK,UAAb,kBCZKC,G,MAAW,SAACZ,GACvB,OACE,yBAAKE,UAAU,aACZF,EAAMa,KAAKC,KAAI,SAAAb,GAAM,OACpB,kBAAC,EAAD,CAAMc,IAAKd,EAAOI,GAAIJ,OAAQA,UCJzBe,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACpB,2BACEhB,UAAU,SACVS,KAAK,SACLM,YAAaA,EACbE,SAAUD,M,eCsCCE,E,kDAxCb,aAAe,IAAD,8BACZ,gBAgBFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEC,OAAQF,EAAEb,OAAOgB,SAfjC,EAAKC,MAAQ,CACXb,KAAMc,EAAOd,KACbW,OAAQ,IALE,E,qDAqBJ,IAAD,EACkBI,KAAKF,MAAtBb,EADD,EACCA,KAAMW,EADP,EACOA,OACRK,EAAehB,EAAKiB,QACxB,SAAC7B,GAAD,OAAYA,EAAOK,KAAKyB,cAAcC,SAASR,EAAOO,kBAGxD,OACE,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,MAAf,kBACA,kBAAC,EAAD,CACEe,YAAY,qBACZC,aAAcU,KAAKP,qBAErB,kBAAC,EAAD,CAAUR,KAAMgB,S,GAnCNI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e2dd15d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = (props) => {\n  const { person } = props;\n\n  return (\n    <div className=\"card-container\">\n      <img alt=\"person\" src={`https://robohash.org/${person.id}?set=set1&size=180x180`} />\n      <h2>{person.name}</h2>\n      <a\n        href={person.website}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <button type=\"button\">Learn more</button>\n      </a>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.team.map(person => (\n        <Card key={person.id} person={person}/>\n      ))}\n    </div>\n  )\n}","import React from 'react';\n\nimport './search.styles.css';\n\nexport const Search = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n)\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\nimport { Search } from './components/search/search.component'\nimport './App.css';\nimport People from './db.json'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      team: People.team,\n      search: '',\n    };\n  }\n\n  // to use with JSON Server\n  // componentDidMount() {\n  //   fetch('http://localhost:4000/team')\n  //   .then(response => response.json())\n  //   .then(team => this.setState({ team: team }))\n  // }\n\n  // autobind on arrow functions\n  handleSearchChange = (e) => {\n    this.setState({ search: e.target.value })\n  }\n\n  render() {\n    const { team, search } = this.state;\n    const filteredTeam = team.filter(\n      (person) => person.name.toLowerCase().includes(search.toLowerCase()),\n    )\n\n    return (\n      <div className=\"App\">\n        <div className=\"h1\">Greatest minds</div>\n        <Search\n          placeholder=\"search great minds\"\n          handleChange={this.handleSearchChange}\n        />\n        <CardList team={filteredTeam} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}